{"version":3,"file":"mergeInputs.js","sourceRoot":"","sources":["../../../plugin/build/mergeInputs.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,qBAAqB,EAAE,MAAM,+BAA+B,CAAC;AAGtE,MAAM,CAAC,MAAM,WAAW,GAAG,CACzB,KAAgC,EAChC,MAA+B,EAC/B,eAAyD,EACjC,EAAE;IAC1B,IAAG,OAAO,KAAK,KAAK,WAAW,EAAC,CAAC;QAC/B,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;IAC1D,CAAC;SAAM,IAAG,OAAO,MAAM,KAAK,WAAW,EAAE,CAAC;QACxC,OAAO,KAAK,CAAC;IACf,CAAC;SAAM,IAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC;QAChC,MAAM,eAAe,GAAG,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,CAAA;QACvE,OAAO;YACL,GAAG,KAAK;YACR,GAAG,eAAe;SACnB,CAAA;IACH,CAAC;SAAM,IAAG,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,IAAI,IAAI,EAAE,CAAC;QACvD,OAAO,EAAE,GAAG,KAAK,EAAE,GAAG,MAAM,EAAE,CAAC;IACjC,CAAC;SAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE,CAAC;QACtC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,eAAe,CAAC,MAAM,CAAC,CAAA;QAC5C,OAAO;YACL,GAAG,KAAK;YACR,CAAC,GAAG,CAAC,EAAE,KAAK;SACb,CAAA;IACH,CAAC;SAAM,CAAC;QACN,MAAM,IAAI,KAAK,CAAC,kBAAkB,MAAM,EAAE,CAAC,CAAC;IAC9C,CAAC;AACH,CAAC,CAAC","sourcesContent":["import type { InputOption } from \"rollup\";\nimport { createInputNormalizer } from \"../helpers/inputNormalizer.js\";\n\n\nexport const mergeInputs = (\n  input: { [key: string]: string },\n  input2: InputOption | undefined,\n  inputNormalizer: ReturnType<typeof createInputNormalizer>\n): Record<string, string> => {\n  if(typeof input === \"undefined\"){\n    throw new Error(\"The first input can not be undefined\");\n  } else if(typeof input2 === \"undefined\") {\n    return input;\n  } else if(Array.isArray(input2)) {\n    const inputsFromArray = Object.fromEntries(input2.map(inputNormalizer))\n    return {\n      ...input,\n      ...inputsFromArray,\n    }\n  } else if(typeof input2 === \"object\" && input2 != null) {\n    return { ...input, ...input2 };\n  } else if (typeof input2 === \"string\") {\n    const [key, value] = inputNormalizer(input2)\n    return {\n      ...input,\n      [key]: value,\n    }\n  } else {\n    throw new Error(`Invalid input: ${input2}`);\n  }\n};\n"]}