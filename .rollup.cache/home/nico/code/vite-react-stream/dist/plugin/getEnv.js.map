{"version":3,"file":"getEnv.js","sourceRoot":"","sources":["../../plugin/getEnv.ts"],"names":[],"mappings":"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","sourcesContent":["import { readFileSync } from \"node:fs\";\nimport { resolve } from \"node:path\";\nimport type { ConfigEnv, UserConfig } from \"vite\";\nimport { loadEnv } from \"vite\";\nimport { DEFAULT_CONFIG } from \"./options.js\";\n\n/**\n * Get environment variables for Vite, sets defaults to ensure the server can start with BASE_URL and PUBLIC_URL\n *\n * @param config - Vite configuration object\n * @param { isPreview: boolean } - Object containing a boolean indicating if the environment is for preview\n * @returns An object containing the environment variables\n */\nexport function getEnv(config: UserConfig, configEnv: ConfigEnv) {\n  const isLocal =\n    config.mode === \"development\"\n\n  const envName = isLocal\n    ? `${config.mode}.local`\n    : config.mode\n    ? config.mode\n    : \"production\";\n  const environmentName = config.mode ?? envName ?? \"production\";\n\n  const env = loadEnv(\n    environmentName,\n    config.envDir ?? config.root ?? process.cwd(),\n    config.envPrefix ?? DEFAULT_CONFIG.ENV_PREFIX ?? \"VITE_\"\n  );\n\n  // Get server config\n  const serverConfig = config.server || {};\n  const previewConfig = config.preview || {};\n  const host = configEnv.isPreview\n    ? previewConfig.host ?? DEFAULT_CONFIG.PREVIEW_HOST\n    : serverConfig.host ?? DEFAULT_CONFIG.DEV_HOST;\n  let previewPort = previewConfig.port ?? DEFAULT_CONFIG.PREVIEW_PORT;\n  let devPort = serverConfig.port ?? DEFAULT_CONFIG.DEV_PORT;\n\n  let homepage = env[\"VITE_BASE_URL\"]\n  if (configEnv.command === \"build\" && (!homepage || homepage === \"\")) {\n    try {\n      const packageJson = JSON.parse(\n        readFileSync(resolve(config.root ?? \"\", \"package.json\"), \"utf-8\")\n      );\n      homepage = packageJson.homepage ?? \"\";\n      if (!homepage || homepage === \"\") {\n        console.warn(\n          \"[RSC] ðŸ”§ For production builds, please set 'homepage' in package.json, or set VITE_BASE_URL in your environment\"\n        );\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  let baseUrl =\n    env[\"VITE_BASE_URL\"] && env[\"VITE_PUBLIC_URL\"] !== \"\"\n      ? env[\"VITE_BASE_URL\"]\n      : configEnv.isPreview\n      ? `http://${host}:${previewPort}`\n      : configEnv.command === \"serve\"\n      ? `http://${host}:${devPort}`\n      : homepage;\n\n  let publicUrl =\n    env[\"VITE_PUBLIC_URL\"] && env[\"VITE_PUBLIC_URL\"] !== \"\"\n      ? env[\"VITE_PUBLIC_URL\"]\n      : \"\";\n\n  // Determine port and host based on mode\n  const port = configEnv.isPreview\n    ? previewConfig.port || DEFAULT_CONFIG.PREVIEW_PORT // Preview server\n    : serverConfig.port || DEFAULT_CONFIG.DEV_PORT; // Dev server\n\n  // Build base URL\n  if (configEnv.isPreview && `http://${host}:${port}` !== baseUrl) {\n    console.log(\n      `VITE_BASE_URL: \\\"${baseUrl}\\\" wasn't configured correctly for this server, overriding to: \\\"http://${host}:${port}\\\"`\n    );\n    baseUrl = `http://${host}:${port}`;\n  }\n\n  const envPrefix =\n    typeof config.envPrefix === \"string\"\n      ? config.envPrefix\n      : Array.isArray(config.envPrefix)\n      ? config.envPrefix[0]\n      : DEFAULT_CONFIG.ENV_PREFIX;\n\n  const nodeProcessEnv = {\n    NODE_ENV: configEnv.command === \"build\" ? \"production\" : \"development\",\n  };\n  const defineProcess = Object.entries(nodeProcessEnv)\n    .map(([key, value]) => {\n      switch (key) {\n        case \"NODE_ENV\":\n          const isDev =\n            value === \"\"\n              ? configEnv.command === \"build\"\n                ? false\n                : true\n              : value === \"development\";\n          return [`import.meta.env.DEV`, JSON.stringify(isDev)];\n        default:\n          return null;\n      }\n    })\n    .filter(Array.isArray);\n\n  const defineImportMeta = Object.entries(env).map(([key, value]) => [\n    `import.meta.env.${key}`,\n    key === \"VITE_BASE_URL\"\n      ? value\n        ? JSON.stringify(value)\n        : JSON.stringify(baseUrl)\n      : key === \"VITE_PUBLIC_URL\"\n      ? value\n        ? JSON.stringify(value)\n        : JSON.stringify(publicUrl)\n      : JSON.stringify(value),\n  ]);\n  const define = Object.fromEntries([...defineProcess, ...defineImportMeta]);\n\n  return {\n    baseUrl,\n    publicUrl,\n    port,\n    host,\n    envPrefix,\n    environmentName,\n    env,\n    define,\n  };\n}\n"]}