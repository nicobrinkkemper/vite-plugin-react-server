{"version":3,"file":"createPageLoader.js","sourceRoot":"","sources":["../../../plugin/loader/createPageLoader.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,IAAI,WAAW,EAAE,MAAM,WAAW,CAAC;AAEnD,OAAO,EACL,IAAI;AACJ,aAAa;EACd,MAAM,kCAAkC,CAAC;AAE1C,OAAO,EACL,uBAAuB,EACvB,uBAAuB;AACvB,aAAa;EACd,MAAM,kCAAkC,CAAC;AAC1C,OAAO,EAAE,4BAA4B,EAAE,MAAM,sCAAsC,CAAC;AAqBpF,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,EAClC,EAAE,EACF,cAAc,EACd,cAAc,EACd,oBAAoB,GAAG,KAAK,EAC5B,oBAAoB,GAAG,KAAK,GACD,EAAE,EAAE;IAC/B,MAAM,MAAM,GAAG,CAAC,CAAC,GAAG,EAAE,KAAK,CAAgB,EAAE,EAAE;QAC7C,IAAI,CAAC;YACH,IACE,cAAc,EAAE,QAAQ,CAAC,GAAG,CAAC;gBAC7B,CAAC,oBAAoB,IAAI,OAAO,KAAK,KAAK,UAAU,CAAC,EACrD,CAAC;gBACD,OAAO,CAAC,GAAG,EAAE,uBAAuB,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;YACxD,CAAC;YACD,IACE,cAAc,EAAE,QAAQ,CAAC,GAAG,CAAC;gBAC7B,CAAC,oBAAoB,IAAI,OAAO,KAAK,KAAK,UAAU,CAAC,EACrD,CAAC;gBACD,OAAO,CAAC,GAAG,EAAE,uBAAuB,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;YACxD,CAAC;YACD,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACtB,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,OAAO,CAAC,KAAK,CAAC,oCAAoC,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;YACnE,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACtB,CAAC;IACH,CAAC,CAAC;IACF,OAAO,KAAK,EAAE,GAAW,EAAE,EAAE,CAC3B,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;AACtE,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,EAC/B,QAAQ,EACR,IAAI,EACJ,MAAM,EACN,UAAU,EACV,cAAc,EACd,cAAc,EACd,oBAAoB,EACpB,oBAAoB,GACI,EAAE,EAAE;IAC5B,MAAM,cAAc,GAAG,4BAA4B,CAAC;QAClD,IAAI;QACJ,MAAM;QACN,UAAU;QACV,cAAc,EAAE,IAAI;QACpB,eAAe,EAAE,IAAI;QACrB,oBAAoB,EAAE,EAAE;KACzB,CAAC,CAAC;IACH,OAAO,KAAK,EAAE,EAAU,EAAE,EAAE;QAC1B,MAAM,YAAY,GAAG,cAAc,CAAC,EAAE,CAAC,CAAC;QACxC,MAAM,KAAK,GACT,YAAY,IAAI,QAAQ;YACtB,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC;YACxB,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,KAAK,YAAY,CAAC,CAAC;QAC3E,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,KAAK,CACb,qCAAqC,EAAE,KAAK,YAAY,SAAS,IAAI,EAAE,CACxE,CAAC;QACJ,CAAC;QACD,MAAM,YAAY,GAAG,MAAM,IAAI,CAC7B,WAAW,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,IAAI,CAAC,EACrC,EAAE,MAAM,EAAE,QAAQ,EAAE,EACpB,mBAAmB,CAAC;YAClB,EAAE;YACF,cAAc;YACd,cAAc;YACd,oBAAoB;YACpB,oBAAoB;SACrB,CAAC,CACH,CAAC;QACF,OAAO,YAAY,CAAC;IACtB,CAAC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { resolve as resolvePath } from \"node:path\";\n\nimport { \n  load\n  // @ts-ignore\n} from \"react-server-dom-esm/node-loader\";\n\nimport {\n  registerClientReference,\n  registerServerReference,\n  // @ts-ignore\n} from \"react-server-dom-esm/server.node\";\nimport { createNormalizedRelativePath } from \"../helpers/normalizedRelativePath.js\";\n\ntype CreatePageLoaderOptions = {\n  manifest: Record<string, { file: string }>;\n  root: string;\n  outDir: string;\n  moduleBase: string;\n  registerServer?: string[];\n  registerClient?: string[];\n  alwaysRegisterServer?: boolean;\n  alwaysRegisterClient?: boolean;\n};\n\ntype CreateDefaultLoaderOptions = {\n  id: string;\n  registerServer?: string[];\n  registerClient?: string[];\n  alwaysRegisterServer?: boolean;\n  alwaysRegisterClient?: boolean;\n};\n\nexport const createDefaultLoader = ({\n  id,\n  registerServer,\n  registerClient,\n  alwaysRegisterServer = false,\n  alwaysRegisterClient = false,\n}: CreateDefaultLoaderOptions) => {\n  const mapper = ([key, value]: [string, any]) => {\n    try {\n      if (\n        registerClient?.includes(key) ||\n        (alwaysRegisterClient && typeof value === \"function\")\n      ) {\n        return [key, registerClientReference(value, id, key)];\n      }\n      if (\n        registerServer?.includes(key) ||\n        (alwaysRegisterServer && typeof value === \"function\")\n      ) {\n        return [key, registerServerReference(value, id, key)];\n      }\n      return [key, value];\n    } catch (e) {\n      console.error(\"[RSC] Error registering reference:\", key, value, e);\n      return [key, value];\n    }\n  };\n  return async (url: string) =>\n    Object.fromEntries(Object.entries(await import(url)).map(mapper));\n};\n\nexport const createPageLoader = ({\n  manifest,\n  root,\n  outDir,\n  moduleBase,\n  registerServer,\n  registerClient,\n  alwaysRegisterServer,\n  alwaysRegisterClient,\n}: CreatePageLoaderOptions) => {\n  const pathNormalizer = createNormalizedRelativePath({\n    root,\n    outDir,\n    moduleBase,\n    noLeadingSlash: true,\n    noTrailingSlash: true,\n    moduleBaseExceptions: [],\n  });\n  return async (id: string) => {\n    const normalizedId = pathNormalizer(id);\n    const entry =\n      normalizedId in manifest\n        ? manifest[normalizedId]\n        : Object.values(manifest).find((entry) => entry.file === normalizedId);\n    if (!entry) {\n      throw new Error(\n        `Could not find manifest entry for ${id}, ${normalizedId} from ${root}`\n      );\n    }\n    const loaderResult = await load(\n      resolvePath(root, outDir, entry.file),\n      { format: \"module\" },\n      createDefaultLoader({\n        id,\n        registerServer,\n        registerClient,\n        alwaysRegisterServer,\n        alwaysRegisterClient,\n      })\n    );\n    return loaderResult;\n  };\n};\n"]}