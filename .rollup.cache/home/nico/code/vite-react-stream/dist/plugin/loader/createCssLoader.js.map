{"version":3,"file":"createCssLoader.js","sourceRoot":"","sources":["../../../plugin/loader/createCssLoader.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,WAAW,EAAiB,MAAM,MAAM,CAAC;AAChE,OAAO,EACL,kBAAkB,EAClB,qBAAqB,GACtB,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;AAChD,OAAO,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAC;AA2BlD;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,eAAe,CAAI,OAA+B;IACtE,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;IAE3B,MAAM,UAAU,GAAG,IAAI,GAAG,EAAU,CAAC;IAErC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,WAAW,CAAC;QAC5C,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;IAE1E,MAAM,MAAM,GAAG,OAAO,CAAC,QAAQ;QAC7B,CAAC,CAAC,CAAC,EAAU,EAAE,EAAE,CACb,kBAAkB,CAChB,OAAO,CAAC,QAAQ,EAChB,IAAI,EACJ,EAAE,EACF,OAAO,CAAC,SAAS,CAClB;QACL,CAAC,CAAC,CAAC,EAAU,EAAE,EAAE,CAAC,qBAAqB,CAAC,OAAO,CAAC,WAAY,EAAE,EAAE,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;IAEvF,MAAM,WAAW,GAAG,KAAK,EAAE,EAAU,EAAE,EAAE;QACvC,IAAI,CAAC,EAAE;YAAE,OAAO,EAAE,CAAC;QAEnB,IAAI,CAAC;YACH,MAAM,GAAG,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACrC,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;YAClD,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;YACjE,OAAO,GAA0B,CAAC;QACpC,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,IAAI,CAAC,CAAC,OAAO,EAAE,QAAQ,CAAC,+BAA+B,CAAC,EAAE,CAAC;gBACzD,OAAO,EAAE,IAAI,EAAE,MAAM,EAAyB,CAAC;YACjD,CAAC;iBAAM,CAAC;gBACN,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAyB,CAAC;YAC5D,CAAC;QACH,CAAC;IACH,CAAC,CAAC;IAEF,OAAO,WAAW,CAAC;AACrB,CAAC","sourcesContent":["import { createLogger, ModuleGraph, type Manifest } from \"vite\";\nimport {\n  collectManifestCss,\n  collectModuleGraphCss,\n} from \"../collect-css-manifest.js\";\nimport { resolvePage } from \"../resolvePage.js\";\nimport { resolveProps } from \"../resolveProps.js\";\n\ntype BaseCssLoaderOptions = {\n  /** callback to add css files to the stream */\n  onCssFile: (css: string) => void;\n  /** loader to load the module */\n  loader: (id: string) => Promise<Record<string, any>>;\n  /** url of the page */\n  url: string;\n  /** manually provided css files to add */\n  cssFiles: string[];\n};\n\ntype CreateCssLoaderOptions =\n  | (BaseCssLoaderOptions & {\n      /** manifest to collect css from */\n      manifest: Manifest;\n      /** when manifest is given, moduleGraph is not needed */\n      moduleGraph?: never;\n    })\n  | (BaseCssLoaderOptions & {\n      /** when moduleGraph is given, manifest is not needed, manual cssFiles can still be provided */\n      manifest?: never;\n      /** when moduleGraph is given, manifest is not needed, manual cssFiles can still be provided */\n      moduleGraph: ModuleGraph;\n    });\n\n/**\n * create a loader that can be used to load css files from a manifest or a moduleGraph\n * @param options\n * @returns\n */\nexport async function createCssLoader<T>(options: CreateCssLoaderOptions) {\n  const root = process.cwd();\n\n  const cssModules = new Set<string>();\n\n  if (!(options.manifest || options.moduleGraph))\n    throw new Error(\"Missing manifest or moduleGraph, pass it to options.\");\n\n  const getCss = options.manifest\n    ? (id: string) =>\n        collectManifestCss(\n          options.manifest,\n          root,\n          id,\n          options.onCssFile\n        )\n    : (id: string) => collectModuleGraphCss(options.moduleGraph!, id, options.onCssFile);\n\n  const loadWithCss = async (id: string) => {\n    if (!id) return {};\n\n    try {\n      const mod = await options.loader(id);\n      const pageCss = await Promise.resolve(getCss(id));\n      Array.from(pageCss.keys()).forEach((css) => cssModules.add(css));\n      return mod as Record<string, any>;\n    } catch (e: any) {\n      if (e.message?.includes(\"module runner has been closed\")) {\n        return { type: \"skip\" } as Record<string, any>;\n      } else {\n        return { type: \"error\", error: e } as Record<string, any>;\n      }\n    }\n  };\n\n  return loadWithCss;\n}\n"]}