{"version":3,"file":"createDevMiddleware.js","sourceRoot":"","sources":["../../../plugin/react-server/createDevMiddleware.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,cAAc,EAAE,MAAM,MAAM,CAAC;AAEvD,OAAO,EAAiD,MAAM,aAAa,CAAC;AAC5E,OAAO,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AAUnD;;GAEG;AACH,MAAM,UAAU,mBAAmB,CACjC,MAAqB,EACrB,OAA6B;IAE7B,OAAO,KAAK,EAAE,GAAoB,EAAE,GAAmB,EAAE,IAAS,EAAE,EAAE;QACpE,yBAAyB;QACzB,IACE,CAAC,GAAG,CAAC,GAAG;YACR,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,EAC1D,CAAC;YACD,OAAO,IAAI,EAAE,CAAC;QAChB,CAAC;QACD,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,YAAY,CAAC;YACxC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC;YACpC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;QAEZ,IAAI,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;YAE5C,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,GAAG,EAAE,OAAO,EAAE;gBAC/C,MAAM,EAAE,MAAM,CAAC,aAAa;gBAC5B,WAAW,EAAE,MAAM,CAAC,WAAW;aAChC,CAAC,CAAC;YAEH,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;gBAC5B,IACG,MAAM,CAAC,KAAe,CAAC,OAAO,EAAE,QAAQ,CACvC,+BAA+B,CAChC,EACD,CAAC;oBACD,OAAO,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC;oBACzD,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC;oBAC3D,GAAG,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;oBAC5C,OAAO;gBACT,CAAC;gBACD,OAAO,CAAC,KAAK,CAAC,qBAAqB,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;gBACnD,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC;gBAC3D,GAAG,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;gBAC7C,OAAO;YACT,CAAC;YAED,IAAI,MAAM,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;gBAC9B,GAAG,CAAC,GAAG,EAAE,CAAC;gBACV,OAAO;YACT,CAAC;YAED,GAAG,CAAC,SAAS,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;YAClD,IAAI,MAAM,CAAC,MAAM;gBAAE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7C,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,IAAI,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,+BAA+B,CAAC,EAAE,CAAC;gBAC7D,OAAO,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC;gBACzD,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC;gBAC3D,GAAG,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;gBAC5C,OAAO;YACT,CAAC;YACD,IAAI,CAAC,KAAK,CAAC,CAAC;QACd,CAAC;IACH,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import { IncomingMessage, ServerResponse } from \"http\";\nimport type { ViteDevServer } from \"vite\";\nimport { type RequestHandler, type StreamPluginOptions } from \"../types.js\";\nimport { createHandler } from \"./createHandler.js\";\n\nexport type DevMiddlewareOptions = Required<\n  Pick<\n    StreamPluginOptions,\n    \"moduleBase\" | \"moduleBasePath\" | \"moduleBaseURL\" | \"projectRoot\"\n  >\n> &\n  Pick<StreamPluginOptions, \"Page\" | \"props\" | \"build\" | \"Html\" | \"pageExportName\" | \"propsExportName\">;\n\n/**\n * Creates a request handler for development\n */\nexport function createDevMiddleware(\n  server: ViteDevServer,\n  options: DevMiddlewareOptions\n): RequestHandler {\n  return async (req: IncomingMessage, res: ServerResponse, next: any) => {\n    // Skip non-page requests\n    if (\n      !req.url ||\n      (req.url.includes(\".\") && !req.url.endsWith(\"/index.rsc\"))\n    ) {\n      return next();\n    }\n    const url = req.url.endsWith(\"/index.rsc\")\n      ? req.url.replace(\"/index.rsc\", \"/\")\n      : req.url;\n\n    try {\n      console.log(\"[stream] Handling RSC stream\");\n\n      const result = await createHandler(url, options, {\n        loader: server.ssrLoadModule,\n        moduleGraph: server.moduleGraph,\n      });\n\n      if (result.type === \"error\") {\n        if (\n          (result.error as Error).message?.includes(\n            \"module runner has been closed\"\n          )\n        ) {\n          console.log(\"[RSC] Module runner closed, returning 503\");\n          res.writeHead(503, { \"Content-Type\": \"text/x-component\" });\n          res.end('{\"error\":\"Server restarting...\"}');\n          return;\n        }\n        console.error(\"[RSC] Stream error:\", result.error);\n        res.writeHead(500, { \"Content-Type\": \"text/x-component\" });\n        res.end('{\"error\":\"Internal Server Error\"}');\n        return;\n      }\n\n      if (result.type !== \"success\") {\n        res.end();\n        return;\n      }\n\n      res.setHeader(\"Content-Type\", \"text/x-component\");\n      if (result.stream) result.stream.pipe(res);\n    } catch (error: any) {\n      if (error.message?.includes(\"module runner has been closed\")) {\n        console.log(\"[RSC] Module runner closed, returning 503\");\n        res.writeHead(503, { \"Content-Type\": \"text/x-component\" });\n        res.end('{\"error\":\"Server restarting...\"}');\n        return;\n      }\n      next(error);\n    }\n  };\n}\n"]}