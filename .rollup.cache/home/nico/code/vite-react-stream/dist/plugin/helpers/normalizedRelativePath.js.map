{"version":3,"file":"normalizedRelativePath.js","sourceRoot":"","sources":["../../../plugin/helpers/normalizedRelativePath.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,MAAM,CAAC;AAiBrC,MAAM,CAAC,MAAM,4BAA4B,GAAG,CAC1C,UAAyC;IACvC,IAAI,EAAE,OAAO,CAAC,GAAG,EAAE;IACnB,MAAM,EAAE,MAAM;IACd,UAAU,EAAE,KAAK;IACjB,cAAc,EAAE,KAAK;IACrB,eAAe,EAAE,KAAK;IACtB,oBAAoB,EAAE,EAAE;CACzB,EACD,EAAE;IACF,IAAI,IAAI,GACN,OAAO,CAAC,cAAc,IAAI,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC;QAC1D,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QAC7B,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC;IACzB,IAAI,OAAO,CAAC,eAAe,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;QAClD,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC3B,CAAC;IACD,MAAM,YAAY,GAAG,CAAC,IAAY,EAAE,EAAE,CACnC,OAAO,CAAC,MAAiB,KAAK,IAAI;QACjC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC;QACnC,CAAC,CAAC,IAAI,CAAC;IAEX,MAAM,UAAU,GAAG,CAAC,IAAY,EAAE,EAAE;QAClC,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC;YAC5C,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC;YACjC,CAAC,CAAC,IAAI,CAAC;QACT,OAAO,QAAQ,CAAC;IAClB,CAAC,CAAC;IAEF,MAAM,gBAAgB,GAAG,CAAC,IAAY,EAAE,EAAE;QACxC,IAAI,WAAW,GAAG,IAAI,CAAC;QACvB,IAAI,OAAO,CAAC,cAAc,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC;YACnD,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC9B,CAAC;QACD,IAAI,OAAO,CAAC,eAAe,IAAI,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;YACzD,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACzC,CAAC;QACD,OAAO,WAAW,CAAC;IACrB,CAAC,CAAC;IAEF,OAAO,CAAC,IAAY,EAAE,EAAE,CAAC,gBAAgB,CAAC,YAAY,CAAC,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3F,CAAC,CAAC","sourcesContent":["import { normalizePath } from \"vite\";\n\ntype NormalizedRelativePathOptions = {\n  // will automatically remove this part\n  root: string;\n  // will automatically see this as a optional extra part of the rootDir that will be removed\n  outDir: string;\n  // will ensure it always starts with this path, if it does not it will be added\n  moduleBase: string;\n  // will ensure it never starts with a leading /, which in some cases is needed (vite entry), other cases it is not for example from project root /\n  noLeadingSlash: boolean;\n  // will ensure it never ends with a trailing /\n  noTrailingSlash: boolean;\n  // allowed exception to moduleBase rules\n  moduleBaseExceptions: string[];\n};\n\nexport const createNormalizedRelativePath = (\n  options: NormalizedRelativePathOptions = {\n    root: process.cwd(),\n    outDir: \"dist\",\n    moduleBase: \"src\",\n    noLeadingSlash: false,\n    noTrailingSlash: false,\n    moduleBaseExceptions: [],\n  }\n) => {\n  let base =\n    options.noLeadingSlash && options.moduleBase.startsWith(\"/\")\n      ? options.moduleBase.slice(1)\n      : options.moduleBase;\n  if (options.noTrailingSlash && base.endsWith(\"/\")) {\n    base = base.slice(0, -1);\n  }\n  const removeOutDir = (path: string) =>\n    (options.outDir as string) === path\n      ? path.slice(options.outDir.length)\n      : path;\n\n  const removeRoot = (path: string) => {\n    const relative = path.startsWith(options.root)\n      ? path.slice(options.root.length)\n      : path;\n    return relative;\n  };\n\n  const ensureModuleBase = (path: string) => {\n    let transformed = path;\n    if (options.noLeadingSlash && path.startsWith(\"/\")) {\n      transformed = path.slice(1);\n    }\n    if (options.noTrailingSlash && transformed.endsWith(\"/\")) {\n      transformed = transformed.slice(0, -1);\n    }\n    return transformed;\n  };\n\n  return (path: string) => ensureModuleBase(removeOutDir(removeRoot(normalizePath(path))));\n};\n"]}