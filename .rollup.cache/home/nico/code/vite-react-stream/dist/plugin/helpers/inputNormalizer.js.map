{"version":3,"file":"inputNormalizer.js","sourceRoot":"","sources":["../../../plugin/helpers/inputNormalizer.ts"],"names":[],"mappings":"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","sourcesContent":["import path, { join, relative, sep } from \"node:path\";\nimport { DEFAULT_CONFIG } from \"../options.js\";\nimport { existsSync, realpathSync } from \"node:fs\";\nimport { normalizePath as normalizePathVite } from \"vite\";\n\ntype NormalizedInputOptions = {\n  // will automatically remove this part\n  condition: \"react-client\" | \"react-server\";\n  root?: string;\n  nodeRoot?: string;\n  pluginRoot?: string;\n  temporaryReferences?: WeakMap<object, string>;\n};\n\nexport const createInputNormalizer = (\n  {\n    root = process.cwd(),\n    nodeRoot = process[\"env\"][\"module_root\"] ??\n      process.cwd() + sep + \"node_modules\",\n    pluginRoot = join(nodeRoot, \"vite-plugin-react-server\"),\n    temporaryReferences = new WeakMap(),\n    condition = \"react-server\",\n  }: NormalizedInputOptions = {} as NormalizedInputOptions\n) => {\n  // Resolve real paths accounting for symlinks\n  const resolvedRoot = realpathSync(root);\n  const resolvedNodeRoot = realpathSync(nodeRoot);\n  const resolvedPluginRoot = realpathSync(pluginRoot);\n\n  // if the path is in the temporaryReferences, we can return the cached value\n  const getTemporaryReference = (key: object) => {\n    return temporaryReferences.get(key);\n  };\n  const setTemporaryReference = (key: object, value: string) => {\n    temporaryReferences.set(key, value);\n  };\n  const dirDistance = relative(root, nodeRoot).split(sep).length;\n  const dirDistanceString = dirDistance > 0 ? \"../\".repeat(dirDistance - 1) : \"\";\n  console.log(\"debug\", { root, nodeRoot, dirDistance, dirDistanceString });\n  // rules of keys and rollup:\n  // 1. keys must be strings\n  // 2. represent the output file module name, \n  // 3. can be neither absolute nor relative path, should not start with /, ../ or end with extension\n  const normalizeKey = (key: string) => {\n    key = key.replace(DEFAULT_CONFIG.FILE_REGEX, \"\");\n\n\n    while(key.startsWith('/')) {\n      key = key.slice(1);\n    }\n    \n    return key;\n  };\n  // rules of paths:\n  // 1. paths must be strings\n  // 2. paths must be relative to the root\n  const normalizePath = (path: string): string => {\n    if (!path) return path;\n\n    try {\n      // Resolve real path if it exists\n      const realPath = existsSync(path) ? realpathSync(path) : path;\n      \n      // Replace resolved paths\n      path = realPath\n        .replace(resolvedPluginRoot, \"/node_modules/vite-plugin-react-server\")\n        .replace(resolvedRoot, \"/\")\n        .replace(resolvedNodeRoot, \"/node_modules\");\n\n      if(!path.startsWith('/')) {\n        path = '/' + path;\n      }\n\n      return normalizePathVite(path);\n    } catch (err) {\n      // Fallback to regular path normalization if realpath fails\n      path = path\n        .replace(pluginRoot, \"/node_modules/vite-plugin-react-server\")\n        .replace(root, \"/\")\n        .replace(nodeRoot, \"/node_modules\");\n\n      if(!path.startsWith('/')) {\n        path = '/' + path;\n      }\n\n      return normalizePathVite(path);\n    }\n  };\n  // rules of user input:\n  // 1. can be normal vite or rollup input that should merge with our input.\n  // 2. our input is in the form of a structured object, but user could be any valid rollup input.\n  // 3. we need to normalize the user input to our input format.\n  // 4. to reduce complexity, we map over all the keys and values as entries and normalize them.\n  // exceptions: package names `plugin-vite-react-server/worker` could be valid if resolved from configured module_root\n  // exceptions: simple relative references ../../../ is totally valid and useful in tests\n  return (input: any): [string, string] => {  \n    if(typeof input === \"string\") {\n      return [normalizeKey(input), normalizePath(input)]\n    }\n    if (!Array.isArray(input)) {\n      throw new Error(\"input must be an array of [key, value]\");\n    }\n    if (input.length !== 2) {\n      throw new Error(\"input must be an array of [key, value]\");\n    }\n    let [key, value] = input;\n    if (typeof key === \"object\" && key !== null) {\n      const tempRef = getTemporaryReference(key);\n      if (tempRef && typeof tempRef === \"string\") {\n        key = tempRef;\n      }\n      const tempRefValue = getTemporaryReference(value);\n      if (tempRefValue && typeof tempRefValue === \"string\") {\n        value = tempRefValue;\n      }\n      console.log(\"debug\", { key, value });\n      return [key, value];\n    }\n    if (typeof key === \"number\" || !isNaN(Number(key))) {\n      // for arrays, we derive the key from the value\n      key = normalizeKey(value);\n    } else if (typeof key === \"string\") {\n      // lets apply the rules of keys first\n      key = normalizeKey(key);\n    } else {\n      throw new Error(\"key must be a string or number\");\n    }\n    if (typeof value === \"string\") {\n      value = normalizePath(value);\n    } else {\n      throw new Error(\"value must be a string\");\n    }\n    if (!value.includes(\".\") && value.startsWith(\"/\")) {\n      if(condition === \"react-client\") {\n        // the user gave us the route to a directory, we can resolve the dev index.html\n        // to get the intial assets and buld the final html after the build is complete\n        key = key.endsWith(\"/\") ? key + \"index\" : key + \"/index\";\n        // since the index.html is at the root, we always resolve it to the root\n        value = \"index.html\";\n      } else if(condition === \"react-server\") {\n        // for server, we need to resolve the index.html to the root\n        key = key.endsWith(\"/\") ? key + \"index\" : key + \"/index\";\n        value = \"index.html\";\n      } else {\n        throw new Error(`invalid condition: ${condition}`);\n      }\n    }\n    console.log(\"debug\", root, { key, value });\n    if (typeof key === \"object\" && key !== null) {\n      setTemporaryReference(key, value);\n    }\n    const absolutePath = join(resolvedRoot, value);\n    \n    // Check file exists, handling symlinks\n    if(!existsSync(absolutePath)) {\n      const tryRelative = relative(resolvedRoot, absolutePath);\n      if(!existsSync(tryRelative)) {\n        // Try resolving as symlink\n        try {\n          const realPath = realpathSync(absolutePath);\n          if(existsSync(realPath)) {\n            value = relative(resolvedRoot, realPath);\n            console.log('symlink exists', realPath);\n          } else {\n            throw new Error(`file does not exist: ${key} -> ${absolutePath}, from ${resolvedRoot}`);\n          }\n        } catch {\n          throw new Error(`file does not exist: ${key} -> ${absolutePath}, from ${resolvedRoot}`);\n        }\n      } else {\n        value = tryRelative;\n        console.log('relative exists', absolutePath);\n      }\n    } else {\n      // Resolve any symlinks in the path\n      try {\n        const realPath = realpathSync(absolutePath);\n        value = relative(resolvedRoot, realPath);\n        console.log('file exists (resolved symlink)', realPath);\n      } catch {\n        console.log('file exists', absolutePath);\n      }\n    }\n    console.log('debug', {key, value});\n    return [key, value];\n  };\n};\n"]}