{"version":3,"file":"createHtmlStream.js","sourceRoot":"","sources":["../../../plugin/worker/createHtmlStream.ts"],"names":[],"mappings":"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","sourcesContent":["import { createWriteStream } from \"node:fs\";\nimport { Readable, Writable } from \"node:stream\";\nimport { parentPort } from \"node:worker_threads\";\nimport { renderToPipeableStream } from \"react-dom/server\";\nimport { createFromNodeStream \n  // @ts-ignore\n} from \"react-server-dom-esm/client.node\";\nimport type { RenderState } from \"./types.js\";\n\nconst concatter = (chunk: string) => {\n  if (Array.isArray(chunk)) {\n    return Buffer.from(chunk);\n  }\n  return Buffer.from(chunk);\n};\n\nexport function createHtmlStream(\n  renderState: RenderState,\n  writeStream: Writable\n) {\n  const outputPath = renderState.htmlOutputPath;\n\n  // Create readable stream from RSC content\n  const rscStream = Readable.from(renderState.chunks.map(concatter));\n\n  // Create RSC node stream\n  const reactElements = createFromNodeStream(\n    rscStream,\n    renderState.moduleBasePath,\n    renderState.moduleBaseURL\n  );\n  // rsc file destination follows the same path as the html file, but with a .rsc extension\n  const rscOutputPath = renderState.htmlOutputPath.endsWith(\".html\")\n    ? renderState.htmlOutputPath.slice(0, -5) + \".rsc\"\n    : renderState.htmlOutputPath.endsWith(\"/\")\n    ? renderState.htmlOutputPath + \"index.rsc\"\n    : renderState.htmlOutputPath.endsWith(\".\")\n    ? renderState.htmlOutputPath + \"rsc\"\n    : renderState.htmlOutputPath + \".rsc\";\n\n  const writeRscEntry = createWriteStream(rscOutputPath);\n  rscStream.on(\"data\", (chunk) => {\n    writeRscEntry.write(chunk);\n  });\n  rscStream.on(\"end\", () => {\n    writeRscEntry.end();\n  });\n  const stream = renderToPipeableStream(reactElements as React.ReactNode, {\n    ...renderState.pipableStreamOptions,\n    onAllReady() {\n      writeStream.on(\"finish\", () => {\n        parentPort?.postMessage({\n          type: \"HTML\",\n          outputPath,\n          route: renderState.id,\n        });\n      });\n      writeStream.on(\"error\", (error) => {\n        console.error(\"[Worker] Write error at\", error);\n        stream.abort();\n      });\n    },\n    onShellReady() {\n      stream.pipe(writeStream);\n    },\n    onError(error) {\n      console.error(\"[Worker] Render error at\", error);\n      stream.abort();\n      writeStream.destroy();\n    },\n    onShellError(error) {\n      console.error(\"[Worker] Shell error at\", error);\n      stream.abort();\n      writeStream.destroy();\n    },\n  });\n  return { stream, writeStream };\n}\n"]}