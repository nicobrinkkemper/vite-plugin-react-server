{"version":3,"file":"createWorker.js","sourceRoot":"","sources":["../../../plugin/worker/createWorker.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAC;AACjC,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAS7C,MAAM,CAAC,KAAK,UAAU,YAAY,CAChC,OAA4B;IAE5B,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG,OAAO,CAAC;IAC9D,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;IAC3C,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,UAAU,CAAC,CAAC;IAEjD,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,UAAU,EAAE;YACpC,GAAG,EAAE;gBACH,YAAY,EAAE,EAAE;gBAChB,QAAQ,EAAE,IAAI;gBACd,SAAS,EAAE,QAAQ;aACpB;YACD,GAAG,aAAa;SACjB,CAAC,CAAC;QACH,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAE7B,8BAA8B;QAC9B,MAAM,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC1C,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,EAAE;gBACjC,IAAI,OAAO,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;oBAC7B,OAAO,EAAE,CAAC;gBACZ,CAAC;YACH,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IAChB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;QAChD,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC","sourcesContent":["import { join } from \"node:path\";\nimport { Worker } from \"node:worker_threads\";\n\ntype CreateWorkerOptions = {\n  workerPath: string;\n  nodePath: string;\n  mode: \"production\" | \"development\";\n  workerOptions?: WorkerOptions;\n};\n\nexport async function createWorker(\n  options: CreateWorkerOptions\n) {\n  const { workerPath, nodePath, mode, workerOptions } = options;\n  console.log(\"[Worker] Creating worker...\");\n  console.log(\"[Worker] Worker path:\", workerPath);\n\n  try {\n    const worker = new Worker(workerPath, {\n      env: {\n        NODE_OPTIONS: \"\",\n        NODE_ENV: mode,\n        NODE_PATH: nodePath,\n      },\n      ...workerOptions,\n    });\n    worker.setMaxListeners(1000);\n\n    // Wait for worker to be ready\n    await new Promise<void>((resolve, reject) => {\n      worker.once(\"message\", (message) => {\n        if (message.type === \"READY\") {\n          resolve();\n        }\n      });\n      worker.once(\"error\", reject);\n    });\n\n    return worker;\n  } catch (error) {\n    console.error(\"[Worker] Startup error:\", error);\n    throw error;\n  }\n}\n"]}