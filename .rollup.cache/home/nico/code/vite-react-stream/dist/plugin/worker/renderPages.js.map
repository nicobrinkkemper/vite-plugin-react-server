{"version":3,"file":"renderPages.js","sourceRoot":"","sources":["../../../plugin/worker/renderPages.ts"],"names":[],"mappings":"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","sourcesContent":["import { join, resolve as resolvePath } from \"node:path\";\nimport { Transform } from \"node:stream\";\nimport type { Worker } from \"node:worker_threads\";\nimport type {\n  WorkerRscChunkMessage,\n  WorkerRscEndMessage,\n} from \"./types.js\";\nimport { createHandler } from \"../react-server/createHandler.js\";\nimport type { StreamPluginOptions } from \"../types.js\";\n\ninterface PipeableStreamOptions {\n  bootstrapModules?: string[];\n  bootstrapScripts?: string[];\n  bootstrapScriptContent?: string;\n  signal?: AbortSignal;\n  identifierPrefix?: string;\n  namespaceURI?: string;\n  nonce?: string;\n  progressiveChunkSize?: number;\n  onShellReady?: () => void;\n  onAllReady?: () => void;\n  onError?: (error: unknown) => void;\n  importMap?: {\n    imports?: Record<string, string>;\n  };\n}\n\ntype RenderPagesOptions = {\n  pluginOptions: Required<\n    Pick<\n      StreamPluginOptions,\n      \"moduleBase\" | \"moduleBasePath\" | \"moduleBaseURL\" | \"projectRoot\"\n    >\n  > &\n    Pick<\n      StreamPluginOptions,\n      \"Page\" | \"props\" | \"build\" | \"Html\" | \"pageExportName\" | \"propsExportName\"\n    >;\n  outDir: string;\n  manifest: Record<string, { file: string }>;\n  worker: Worker;\n  pipableStreamOptions?: PipeableStreamOptions;\n  loader: (id: string) => Promise<Record<string, any>>;\n  onCssFile?: (path: string) => void;\n  clientCss?: string[];\n};\n\nexport async function renderPages(\n  routes: string[],\n  options: RenderPagesOptions\n) {\n  const destinationRoot = resolvePath(\n    options.pluginOptions.projectRoot,\n    options.outDir\n  );\n  const failedRoutes = new Map<string, Error>();\n  const moduleBasePath = join(\n    destinationRoot,\n    options.pluginOptions.moduleBasePath\n  );\n  const moduleBaseURL = options.pluginOptions.moduleBaseURL;\n\n  const htmlRoot = resolvePath(\n    options.pluginOptions.projectRoot,\n    options.pluginOptions.build?.client ?? options.outDir\n  );\n  const filesOutputted: string[] = [];\n  options.worker.on(\"message\", (msg) => {\n    switch (msg.type) {\n      case \"ERROR\":\n        console.error(\"[RenderPages] Worker error:\", msg.error);\n        break;\n      case \"HTML\":\n        filesOutputted.push(msg.outputPath);\n        if (filesOutputted.length === routes.length) {\n          renderPromises.push(\n            new Promise<void>((resolve) => {\n              options.worker.removeAllListeners();\n              options.worker.terminate();\n              resolve();\n            })\n          );\n        }\n        break;\n      default:\n        break;\n    }\n  });\n  const pipableStreamOptions = options.pipableStreamOptions ?? {};\n\n  // Create promises for each route in the batch\n  const renderPromises = routes.map(async (route) => {\n    try {\n      // Wait for handler creation\n      const result = await createHandler(route, options.pluginOptions, {\n        loader: options.loader,\n        manifest: options.manifest,\n      });\n\n      if (result.type !== \"success\") {\n        return;\n      }\n      const htmlOutputPath = join(htmlRoot, route, \"index.html\");\n\n      // Create a promise that resolves when the worker completes\n      await new Promise<void>((resolve, reject) => {\n        // Pipe RSC stream to worker\n        const transform = new Transform({\n          transform(chunk, _encoding, callback) {\n            // Send raw chunk\n            options.worker.postMessage({\n              type: \"RSC_CHUNK\",\n              id: route,\n              chunk: chunk,\n              moduleBasePath,\n              moduleBaseURL,\n              htmlOutputPath: htmlOutputPath,\n              outDir: options.outDir,\n              pipableStreamOptions,\n            } satisfies WorkerRscChunkMessage);\n            callback();\n          },\n          flush(callback) {\n            options.worker.postMessage({\n              type: \"RSC_END\",\n              id: route,\n            } satisfies WorkerRscEndMessage);\n            callback();\n          },\n        });\n\n        // Listen for worker response for this route\n        const messageHandler = (msg: any) => {\n \n          if (msg.route === route) {\n            if (msg.type === \"ERROR\") {\n              options.worker.removeListener(\"message\", messageHandler);\n              reject(new Error(msg.error));\n            } else if (msg.type === \"HTML\") {\n              options.worker.removeListener(\"message\", messageHandler);\n              resolve();\n            }\n          }\n        };\n\n        options.worker.on(\"message\", messageHandler);\n        result.stream?.pipe(transform);\n      });\n    } catch (error) {\n      failedRoutes.set(route, error as Error);\n    }\n  });\n\n  // Wait for all routes to complete\n  await Promise.all(renderPromises)\n  return {\n    failedRoutes,\n    filesOutputted\n  }\n}\n"]}