{"version":3,"file":"worker.js","sourceRoot":"","sources":["../../../plugin/worker/worker.tsx"],"names":[],"mappings":"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","sourcesContent":["import { createWriteStream } from \"node:fs\";\nimport { mkdir } from \"node:fs/promises\";\nimport { dirname } from \"node:path\";\nimport { Writable } from \"node:stream\";\nimport { parentPort } from \"node:worker_threads\";\n\nimport { createHtmlStream } from \"./createHtmlStream.js\";\nimport type { RenderState, WorkerMessage } from \"./types.js\";\nimport type { PipeableStream } from \"react-dom/server\";\n\nif (!parentPort) {\n  throw new Error(\"This module must be run as a worker\");\n}\n\ndeclare global {\n  interface Window {\n    href: string;\n  }\n} \n// Initialize happy-dom window\n(global as any).window = {\n  href: undefined,\n  pathname: undefined,\n}\n\n// Track active renders\nconst activeRenders = new Map<string, RenderState>();\nconst activeStreams = new Map<string, PipeableStream>();\nconst activeWrites = new Map<string, Writable>();\n\nasync function shutdown() {\n  console.log(\"[Worker] Shutting down forcefully\");\n  while (activeRenders.size > 0) {\n    await new Promise((resolve) => setTimeout(resolve, 100));\n  }\n  for (const stream of activeStreams.values()) {\n    stream.abort();\n  }\n  for (const writeStream of activeWrites.values()) {\n    writeStream.destroy();\n  }\n  process.exit(0);\n}\n// Handle incoming messages\nparentPort.on(\"message\", async (message: WorkerMessage) => {\n  if (message.type === \"SHUTDOWN\") {\n    await shutdown();\n  }\n  if (!parentPort) {\n    throw new Error(\"No parent port available\");\n  }\n  try {\n    switch (message.type) {\n      case \"RSC_CHUNK\": {\n        const { chunk, id, ...rest } = message;\n        (global as any).window.pathname = id;\n        // Skip if already rendered\n        let renderState = activeRenders.get(id);\n        if (renderState?.rendered) {\n          return;\n        }\n        // Initialize render state\n        if (!renderState) {\n          renderState = {\n            chunks: [],\n            complete: false,\n            rendered: false,\n            id: id,\n            ...rest,\n          };\n          activeRenders.set(id, renderState);\n        }\n        // Add chunk\n        if (chunk) renderState.chunks.push(chunk);\n        break;\n      }\n\n      case \"RSC_END\": {\n        const { id } = message;\n        const render = activeRenders.get(id);\n\n        if (!render || !parentPort || render.rendered) return;\n        try {\n          const writeToFile = render.outDir && render.htmlOutputPath;\n          // Write RSC content\n          if (writeToFile) {\n            await mkdir(dirname(render.htmlOutputPath), { recursive: true });\n          }\n          const { stream, writeStream } = createHtmlStream(\n            render,\n            writeToFile\n              ? createWriteStream(render.htmlOutputPath)\n              : new Writable({\n                  write(chunk, _, callback) {\n                    parentPort?.postMessage({\n                      type: \"HTML\",\n                      route: render.id,\n                      content: chunk.toString(),\n                    });\n                    callback();\n                  },\n                })\n          );\n          activeStreams.set(id, stream);\n          activeWrites.set(id, writeStream);\n          writeStream.on(\"finish\", () => {\n            activeStreams.delete(id);\n            activeWrites.delete(id);\n          });\n          writeStream.on(\"error\", () => {\n            activeStreams.delete(id);\n            activeWrites.delete(id);\n            stream.abort();\n          });\n        } catch (error) {\n          activeRenders.delete(id);\n          activeStreams.delete(id);\n          activeWrites.delete(id);\n          throw error;\n        } finally {\n          activeRenders.delete(id);\n        }\n        break;\n      }\n    }\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    parentPort?.postMessage({\n      type: \"ERROR\",\n      error: errorMessage,\n    });\n  }\n});\n\n// Signal ready only after loader is registered\nparentPort.postMessage({ type: \"READY\" });\n\n"]}