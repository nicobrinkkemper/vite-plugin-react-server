{"version":3,"file":"module-graph.js","sourceRoot":"","sources":["../../plugin/module-graph.ts"],"names":[],"mappings":"AAQA,MAAM,UAAU,cAAc,CAAC,MAAqB;IAClD,OAAO;QACL,KAAK,CAAC,iBAAiB,CAAC,EAAU;YAChC,uDAAuD;YACvD,MAAM,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;YAE/B,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,EAAE,EAAE,SAAS,EAAE;gBACvE,sCAAsC;gBACtC,GAAG,EAAE,IAAI;aACV,CAAC,CAAC;YAEH,IAAI,CAAC,UAAU;gBAAE,MAAM,IAAI,KAAK,CAAC,qBAAqB,EAAE,EAAE,CAAC,CAAC;YAE5D,MAAM,UAAU,GAAG,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YACnE,IAAI,CAAC,UAAU;gBAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,EAAE,EAAE,CAAC,CAAC;YAEjE,MAAM,IAAI,GAAG,IAAI,GAAG,EAAU,CAAC;YAC/B,MAAM,GAAG,GAAG,IAAI,GAAG,EAAU,CAAC;YAE9B,mCAAmC;YACnC,MAAM,WAAW,GAAG,CAAC,IAAgB,EAAE,EAAE;gBACvC,oBAAoB;gBACpB,IAAI,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,EAAE,EAAE,CAAC;oBACzC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACnB,CAAC;gBAED,yBAAyB;gBACzB,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,eAAe,EAAE,CAAC;oBACvC,IAAI,GAAG,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC;wBAChC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;wBACjB,WAAW,CAAC,GAAG,CAAC,CAAC;oBACnB,CAAC;gBACH,CAAC;YACH,CAAC,CAAC;YAEF,WAAW,CAAC,UAAU,CAAC,CAAC;YACxB,OAAO,EAAE,EAAE,EAAE,UAAU,CAAC,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;QAChD,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import type { ModuleNode, ViteDevServer } from \"vite\";\n\nexport interface ModuleWithDeps {\n  id: string;\n  deps: Set<string>;\n  css: Set<string>;\n}\n\nexport function getModuleGraph(server: ViteDevServer) {\n  return {\n    async getModuleWithDeps(id: string): Promise<ModuleWithDeps> {\n      // Load module first to ensure it's in the module graph\n      await server.ssrLoadModule(id);\n\n      const resolvedId = await server.pluginContainer.resolveId(id, undefined, {\n        // Add ssr and react-server conditions\n        ssr: true,\n      });\n\n      if (!resolvedId) throw new Error(`Module not found: ${id}`);\n\n      const moduleNode = server.moduleGraph.getModuleById(resolvedId.id);\n      if (!moduleNode) throw new Error(`Module node not found: ${id}`);\n\n      const deps = new Set<string>();\n      const css = new Set<string>();\n\n      // Recursively collect dependencies\n      const collectDeps = (node: ModuleNode) => {\n        // Track CSS imports\n        if (node.id?.endsWith(\".css\") && node.id) {\n          css.add(node.id);\n        }\n\n        // Track all dependencies\n        for (const dep of node.importedModules) {\n          if (dep.id && !deps.has(dep.id)) {\n            deps.add(dep.id);\n            collectDeps(dep);\n          }\n        }\n      };\n\n      collectDeps(moduleNode);\n      return { id: moduleNode.id ?? \"\", deps, css };\n    },\n  };\n}\n"]}