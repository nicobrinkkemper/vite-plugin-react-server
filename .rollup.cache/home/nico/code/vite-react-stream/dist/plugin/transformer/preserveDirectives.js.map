{"version":3,"file":"preserveDirectives.js","sourceRoot":"","sources":["../../../plugin/transformer/preserveDirectives.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Node } from \"estree\";\nimport type { Plugin } from \"rollup\";\nimport { SourceMapGenerator } from \"source-map\";\nimport { DEFAULT_CONFIG } from \"../options.js\";\nimport type { Options } from \"../types.js\";\n\nconst REACT_DIRECTIVES = new Set([\"use client\", \"use server\", \"use no-memo\"]);\n\ninterface PreserveDirectiveMeta {\n  directives: Record<string, Set<string>>;\n}\n\nexport function preserveDirectives(options?: Pick<Options, \"include\">): Plugin {\n  const meta: PreserveDirectiveMeta = {\n    directives: {},\n  };\n  const fileRegex = options?.include ?? DEFAULT_CONFIG.FILE_REGEX;\n\n  return {\n    name: \"react-preserve-directives\",\n    transform: {\n      order: \"post\",\n      handler(code, id) {\n        if (!fileRegex.test(id)) {\n          return null;\n        }\n\n        const ast = this.parse(code) as Node;\n        if (ast.type !== \"Program\") {\n          return null;\n        }\n\n        let hasDirectives = false;\n        const directives = new Set<string>();\n\n        // Look for directives at start of file\n        for (const node of ast.body) {\n          if (node.type !== \"ExpressionStatement\") {\n            break;\n          }\n\n          if (\n            node.expression.type === \"Literal\" &&\n            typeof node.expression.value === \"string\" &&\n            REACT_DIRECTIVES.has(node.expression.value)\n          ) {\n            directives.add(node.expression.value);\n            hasDirectives = true;\n          }\n        }\n\n        if (!hasDirectives) return null;\n\n        meta.directives[id] = directives;\n\n        // Generate source map\n        const map = new SourceMapGenerator({\n          file: id,\n          sourceRoot: \"\",\n        });\n        map.setSourceContent(id, code);\n\n        return {\n          code,\n          map: map.toString(),\n          meta: { directives: Array.from(directives) },\n        };\n      },\n    },\n\n    renderChunk(code, chunk) {\n      const moduleIds = chunk.moduleIds;\n      const chunkDirectives = moduleIds\n        .map((id) => meta.directives[id])\n        .filter((dirs): dirs is Set<string> => !!dirs)\n        .reduce((acc, dirs) => {\n          dirs.forEach((d) => acc.add(d));\n          return acc;\n        }, new Set<string>());\n\n      if (chunkDirectives.size) {\n        const directiveCode = Array.from(chunkDirectives)\n          .map((d) => `\"${d}\";`)\n          .join(\"\\n\");\n        return {\n          code: `${directiveCode}\\n${code}`,\n        };\n      }\n\n      return null;\n    },\n\n    onLog(level, log) {\n      if (log.code === \"MODULE_LEVEL_DIRECTIVE\" && level === \"warn\") {\n        return false;\n      }\n      return this.warn(log);\n    },\n  };\n}\n"]}