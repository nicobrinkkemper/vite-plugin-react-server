{"version":3,"file":"preserver.js","sourceRoot":"","sources":["../../../plugin/transformer/preserver.ts"],"names":[],"mappings":"AAOA,MAAM,UAAU,WAAW,CAAC,KAAa;IACvC,0CAA0C;IAC1C,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;IAC1C,IAAI,CAAC,KAAK;QAAE,OAAO,KAAK,CAAC;IAEzB,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC,GAAG,KAAK,CAAC;IAE/B,+BAA+B;IAC/B,IAAI,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC;QAC9B,gBAAgB;QAChB,OAAO,KAAK,CAAC;IACf,CAAC;IAED,IAAI,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC;QAC7B,cAAc;QACd,OAAO,KAAK,CAAC;IACf,CAAC;IAED,IAAI,CAAC;QACH,+BAA+B;QAC/B,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAEnC,qCAAqC;QACrC,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,MAAM,EAAE,CAAC;YAClD,MAAM,cAAc,GAAG;gBACrB,IAAI,EAAE,MAAM;gBACZ,GAAG,EAAE,QAAQ;gBACb,GAAG,EAAE,MAAM;gBACX,KAAK,EAAE,IAAI;gBACX,KAAK,EAAE,EAAE;gBACT,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC;aACjB,CAAC;YACF,OAAO,GAAG,EAAE,IAAI,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,OAAO,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;QACpE,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAAC,MAAM,CAAC;QACP,OAAO,KAAK,CAAC;IACf,CAAC;AACH,CAAC","sourcesContent":["interface RSCChunk {\n  id: number;\n  type?: string;\n  content: any;\n  timing?: number;\n}\n\nexport function preserveRSC(chunk: string): string {\n  // Try to parse RSC format: <id>:<content>\n  const match = chunk.match(/^(\\d+):(.+)$/);\n  if (!match) return chunk;\n\n  const [_, id, content] = match;\n\n  // Handle different chunk types\n  if (content.startsWith('\"$S')) {\n    // Fragment type\n    return chunk;\n  }\n\n  if (content.startsWith(\"I[\")) {\n    // Import type\n    return chunk;\n  }\n\n  try {\n    // Try to parse as array/object\n    const parsed = JSON.parse(content);\n\n    // Check if this is a component chunk\n    if (Array.isArray(parsed) && parsed[2] === \"html\") {\n      const componentChunk = {\n        name: \"Page\",\n        env: \"Server\",\n        key: \"page\",\n        owner: null,\n        stack: [],\n        props: parsed[3],\n      };\n      return `${id}:${JSON.stringify(componentChunk)}\\n:N${Date.now()}`;\n    }\n\n    return chunk;\n  } catch {\n    return chunk;\n  }\n}\n"]}