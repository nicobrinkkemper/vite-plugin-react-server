{"version":3,"file":"types.js","sourceRoot":"","sources":["../../plugin/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { \n  UserConfig,\n  BuildOptions,\n  InlineConfig,\n  AliasOptions,\n  Connect,\n} from 'vite';\n\n\n\nexport type ResolvedUserConfig = Required<Pick<UserConfig, \"root\" | \"mode\" | \"build\">> &\n  Omit<UserConfig, \"root\" | \"mode\" | \"build\"> & {\n    build: NonNullable<Required<Pick<BuildOptions, \n      \"target\" | \n      \"outDir\" | \n      \"assetsDir\" | \n      \"ssr\" | \n      \"ssrEmitAssets\" | \n      \"ssrManifest\" | \n      \"manifest\" | \n      \"rollupOptions\"\n    >>> &\n    Omit<BuildOptions, \n      \"target\" | \n      \"outDir\" | \n      \"assetsDir\" | \n      \"ssr\" | \n      \"ssrEmitAssets\" | \n      \"ssrManifest\" | \n      \"manifest\" | \n      \"rollupOptions\"\n    > & {\n      rollupOptions: {\n        input: Record<string, string>\n      } & Omit<NonNullable<BuildOptions['rollupOptions']>, \"input\">\n    }\n  };\n\n// Client plugin options\nexport interface StreamPluginOptionsClient {\n  outDir?: string;\n  build?: BuildConfig;\n  assetsDir?: string;\n  projectRoot?: string;\n  moduleBase?: string;\n  moduleBasePath?: string;\n  moduleBaseURL?: string;\n  clientComponents?: AliasOptions;\n  cssFiles?: AliasOptions;\n}\n\nexport type ResolvedUserOptions = Required<\n  Pick<\n    StreamPluginOptions,\n    | \"moduleBase\"\n    | \"moduleBasePath\"\n    | \"moduleBaseURL\"\n    | \"projectRoot\"\n    | \"build\"\n    | \"Page\"\n    | \"props\"\n    | \"Html\"\n    | \"pageExportName\"\n    | \"propsExportName\"\n    | \"collectCss\"\n    | \"collectAssets\"\n    | \"assetsDir\"\n    | \"workerPath\"\n    | \"loaderPath\"\n    | \"clientEntry\"\n    | \"serverOutDir\"\n    | \"clientOutDir\"\n    | \"moduleBaseExceptions\"\n  >\n> & {\n  build: NonNullable<Required<StreamPluginOptions[\"build\"]>>;\n  autoDiscover: NonNullable<Required<StreamPluginOptions[\"autoDiscover\"]>>;\n};\n\nexport type createBuildConfigFn = <\n  C extends \"react-client\" | \"react-server\"\n>(input: {\n  condition: C;\n  root: string;\n  input: Record<string, string>;\n  userOptions: ResolvedUserOptions;\n  userConfig: ResolvedUserConfig;\n  moduleBaseExceptions: string[];\n  pluginRoot: string;\n  nodeRoot: string;\n  temporaryReferences: WeakMap<WeakKey, string>;\n  moduleBase: string;\n}) => C extends \"react-server\" ? InlineConfig : UserConfig;\n\nexport interface StreamPluginOptions {\n  projectRoot?: string;\n  assetsDir?: string;\n  moduleBase?: string;\n  moduleBasePath?: string;\n  moduleBaseURL?: string;\n  clientEntry?: string;\n  serverOutDir?: string;\n  clientOutDir?: string;\n  // Auto-discovery (zero-config)\n  autoDiscover?: {\n    pagePattern?: string;\n    propsPattern?: string;\n  };\n  // Manual configuration\n  Page: string | ((url: string) => string);\n  props?: undefined | string | ((url: string) => string);\n  // Escape hatches\n  workerPath?: string;\n  loaderPath?: string;\n  pageExportName?: string;\n  propsExportName?: string;\n  Html?: React.FC<{\n    manifest: import(\"vite\").Manifest;\n    pageProps: any;\n    route: string;\n    url: string;\n    children: React.ReactNode;\n  }>;\n  collectCss?: boolean;\n  collectAssets?: boolean;\n  build?: BuildConfig;\n  moduleBaseExceptions?: string[];\n}\n\nexport interface CreateHandlerOptions<T = any> {\n  loader: (id: string) => Promise<T>;\n  manifest?: import(\"vite\").Manifest;\n  moduleGraph?: import(\"vite\").ModuleGraph;\n  cssFiles?: string[];\n  onCssFile?: (path: string) => void;\n  logger?: import(\"vite\").Logger;\n  pipableStreamOptions?: any;\n}\n\nexport type ModuleLoader = (\n  url: string,\n  context?: any,\n  defaultLoad?: any\n) => Promise<Record<string, any>>;\n\nexport interface BaseProps {\n  manifest: import(\"vite\").Manifest;\n  children?: React.ReactNode;\n  assets?: {\n    css?: string[];\n  };\n}\n\nexport type StreamResult =\n  | {\n      type: \"success\";\n      stream: any;\n      assets?: {\n        css?: string[];\n      };\n    }\n  | { type: \"error\"; error: unknown }\n  | { type: \"skip\" };\n\nexport interface RscStreamOptions {\n  Page: React.ComponentType;\n  props: any;\n  Html: any;\n  logger?: Console | import(\"vite\").Logger;\n  cssFiles?: string[];\n  route: string;\n  url: string;\n  pipableStreamOptions?: any;\n  moduleBasePath: string;\n}\n\nexport interface RouteConfig {\n  path: string;\n  // Define page/props paths using patterns\n  pattern?: {\n    page?: string; // e.g. \"page/_theme/[route]/page\"\n    props?: string; // e.g. \"page/_theme/[route]/props\"\n  };\n  // Or use explicit paths\n  paths?: {\n    page: string; // e.g. \"page/home/page\"\n    props: string; // e.g. \"page/home/props\"\n  };\n}\n\nexport interface BuildOutput {\n  dir?: string;\n  rsc?: string;\n  ext?: string;\n}\n\nexport interface BuildConfig {\n  pages: string[] | (() => Promise<string[]> | string[]);\n  client?: string; // Output directory for client files\n  server?: string; // Output directory for server files\n}\n\nexport interface RscResolver {\n  /**\n   * Get RSC data for static generation\n   * @param path - Route path (e.g. \"/\", \"/about\")\n   */\n  getRscData: (path: string) => Promise<{\n    Page: React.ComponentType;\n    props: any;\n  }>;\n}\n\nexport interface Options {\n  include?: RegExp;\n  projectRoot?: string;\n  moduleBase: string;\n  // can be inferred from moduleBase, will add / to moduleBase by default (if not already present)\n  moduleBasePath?: string;\n  Html?: React.ComponentType<\n    React.PropsWithChildren<{ manifest: import(\"vite\").Manifest }>\n  >;\n  Page: string | ((url: string) => string);\n  props?: string | ((url: string) => string);\n  pageExportName?: string;\n  propsExportName?: string;\n  collectCss?: boolean;\n  collectAssets?: boolean;\n  emitCss?: boolean;\n  moduleLoader?: (server: import(\"vite\").ViteDevServer) => ModuleLoader;\n  build?: BuildConfig;\n  outDir?: string; // defaults to 'dist'\n  /**\n   * Configure static asset copying\n   * - true: Copy all assets\n   * - false: Don't copy assets\n   * - Function: Custom filter for which files to copy\n   */\n  copyAssets?: boolean | ((file: string) => boolean);\n}\n\nexport type RequestHandler = Connect.NextHandleFunction;\n\nexport interface SsrStreamOptions {\n  url: string;\n  controller: AbortController;\n  loader: (id: string) => Promise<any>;\n  Html: any;\n  options: StreamPluginOptions;\n  pageExportName: string;\n  propsExportName: string;\n  moduleGraph: any;\n  bootstrapModules?: string[];\n  importMap?: Record<string, string[]>;\n  clientComponents?: boolean;\n  onlyClientComponents?: boolean;\n}\n\nexport type RscServerConfig = {\n  /** How to get RSC data (e.g. HTTP, direct import, etc) */\n  getRscComponent: (url: string) => React.Usable<React.ReactNode>;\n  /** Base URL for client assets */\n  clientBase?: string;\n  /** SSR stream rendering options */\n  ssrOptions?: SsrStreamOptions;\n};\n\nexport interface RscServerModule {\n  /**\n   * Get RSC data for a route\n   * @param path - Route path (e.g. \"/\", \"/about\")\n   * @returns Page component and props\n   */\n  getRscData: (path: string) => Promise<{\n    /** Page component to render */\n    Page: React.ComponentType;\n    /** Props to pass to the page */\n    props: any;\n  }>;\n}\n\nexport interface RegisterComponentMessage {\n  type: \"REGISTER_COMPONENT\";\n  id: string;\n  code: string;\n}\n\nexport type RscBuildResult = string[];\n\nexport interface ReactStreamPluginMeta {\n  timing: BuildTiming;\n}\n\nexport interface BuildTiming {\n  start: number;\n  configResolved?: number;\n  buildStart?: number;\n  buildEnd?: number;\n  renderStart?: number;\n  renderEnd?: number;\n  total?: number;\n}\n"]}